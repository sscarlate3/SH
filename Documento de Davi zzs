#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

typedef int item;
typedef bool boolean;

typedef struct NO {
    item valor;
    struct NO *prox; 
} no;

no* criar_no(item valor, no *proximo){
    no *novo_no = (no *)malloc(sizeof(no));
    novo_no->prox = proximo;
    novo_no->valor = valor;

    return novo_no;
}

typedef struct {
    no *topo;
    int cont;
} Pilha;

Pilha* criar_pilha(){
    Pilha *pilha = (Pilha *)malloc(sizeof(Pilha));
    pilha->topo = NULL;
    pilha->cont = 0;

    return pilha;
}

boolean vazia(Pilha *pilha) {
    if(pilha->cont == 0)
        return true;
    else return false;
}

int tamanho(Pilha *pilha){
    return pilha->cont;
}

void empilhar(Pilha *pilha, item valor){
    no *novo = criar_no(valor, pilha->topo);
    pilha->topo = novo;
    pilha->cont++;
}

int desempilhar(Pilha *pilha){
    no *aux = pilha->topo;
    pilha->topo = aux->prox;
    aux->prox = NULL;
    item valor = aux->valor;
    free(aux);
    pilha->cont--;

    return valor;
}

int main(){
    Pilha *pilha = criar_pilha();

    char token[3];
    int valor, n;

    scanf("%d", &n);
    scanf("%s", token);
    while (token[0] != 'Q' && n > 0){
        if (strcmp(token, "E") == 0){
            scanf(" %d", &valor);
            empilhar(pilha, valor);
            n--;
        }
        else if (strcmp(token, "D") == 0){
            if (vazia(pilha) == 1){
                printf("Erro: Pilha Vazia\n");
                n--; 
            } else {
                printf("%d\n", desempilhar(pilha));
                n--;
            }
        }
        else if (token[0] == 'T'){
            printf("%d\n", tamanho(pilha));
            n--;
        }
        else if (token[0] == 'V'){
            if (vazia(pilha))
                printf("true\n");
            else
                printf("false\n");
            n--;
        }
        else
            printf("ERRO %s\n", token);

        fflush(stdin);
        if (n != 0)
            scanf("%s", token);
    }
    return 0;
}